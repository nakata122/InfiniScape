#version 330 core

// Ouput data
out vec4 color;

in vec2 UV;
in vec3 pos;
in vec3 normals;
in vec3 Normal_cameraspace;
in vec3 EyeDirection_cameraspace;
in vec3 LightDirection_cameraspace;

// Values that stay constant for the whole mesh.
uniform sampler2D Grass;
uniform sampler2D Snow;

vec4 mixTextures(vec2 mUV)
{
	return mix(texture(Grass, mUV), texture(Snow, mUV), max(0.01, pos.y/10));
}

void main(){
	float repeat = 10.0;

	//Trilinear filtering
	vec3 scaledPos = pos/repeat;
	vec3 blending = abs(normals);
	blending /= (blending.x + blending.y + blending.z);
	vec4 xProjection = mixTextures(vec2(scaledPos.y, scaledPos.z)) * blending.x;
	vec4 yProjection = mixTextures(vec2(scaledPos.x, scaledPos.z)) * blending.y;
	vec4 zProjection = mixTextures(vec2(scaledPos.x, scaledPos.y)) * blending.z;

	vec4 final = xProjection + yProjection + zProjection;

	//Lighting

	vec3 LightPosition_worldspace = vec3(0, 50, 0);
	vec3 LightColor = vec3(1,1,1);
	float LightPower = 5000.0f;
	
	// Material properties
	vec3 MaterialDiffuseColor = final.rgb;
	vec3 MaterialAmbientColor = vec3(0.1,0.1,0.1) * MaterialDiffuseColor;

	// Distance to the light
	float distance = length( LightPosition_worldspace - pos );

	// Normal of the computed fragment, in camera space
	vec3 n = normalize( Normal_cameraspace );

	// Direction of the light (from the fragment to the light)
	vec3 l = normalize( LightDirection_cameraspace );

	float cosTheta = clamp( dot( n,l ), 0,1 );
	
	// Eye vector (towards the camera)
	vec3 E = normalize(EyeDirection_cameraspace);

	// Direction in which the triangle reflects the light
	vec3 R = reflect(-l,n);

	float cosAlpha = clamp( dot( E,R ), 0,1 );
	
	color = vec4(
		MaterialAmbientColor +
		MaterialDiffuseColor * LightColor * LightPower * cosTheta / (distance*distance), 1.0f);
}