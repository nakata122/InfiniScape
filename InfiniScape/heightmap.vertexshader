#version 330 core


// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 position;
layout(location = 1) in vec3 normal;
layout(location = 2) in vec2 vertexUV;

uniform mat4 MVP;
uniform mat4 V;
uniform mat4 M;

out vec2 UV;
out vec3 pos;
out vec3 normals;
out vec3 Normal_cameraspace;
out vec3 EyeDirection_cameraspace;
out vec3 LightDirection_cameraspace;

void main(){

    gl_Position = MVP * vec4(position, 1);
	gl_PointSize = 5.0;

	UV = vertexUV;
	normals = normal;
	
	vec3 LightPosition_worldspace = vec3(0, 50, 0);

	// Position of the vertex, in worldspace 
	pos = (M * vec4(position,1)).xyz;

	// Vector that goes from the vertex to the camera, in camera space.
	vec3 vertexPosition_cameraspace = ( V * M * vec4(position,1)).xyz;
	EyeDirection_cameraspace = vec3(0,0,0) - vertexPosition_cameraspace;

	// Vector that goes from the vertex to the light, in camera space. M is ommited because it's identity.
	vec3 LightPosition_cameraspace = ( V * vec4(LightPosition_worldspace,1)).xyz;
	LightDirection_cameraspace = LightPosition_cameraspace + EyeDirection_cameraspace;

	// Normal of the the vertex, in camera space
	Normal_cameraspace = ( V * M * vec4(normal,0)).xyz;
}
